-- Logging helpers.
local pretty_print = require('main.pretty_print')
local function lines(str)
	local t = {}
	local function helper(line) table.insert(t, line) return '' end
	helper((str:gsub('(.-)\n', helper)))
	return t
end
local logs_lines = {}
local function log(text)
	local text_lines = lines(text)
	for i = 1, #text_lines do
		table.insert(logs_lines, text_lines[i])
		if #logs_lines > 62 then
			table.remove(logs_lines, 1)
		end
	end
end
local function log_flush()
	gui.set_text(gui.get_node('logs_label'), table.concat(logs_lines, '\n'))
end
local function plog(t)
	log(pretty_print(t))
end

-- For reverse search of enum names
local enums = {}
for k, v in pairs(cas) do
	if type(v) == 'number' then
		enums[v] = k
	end
end

local function get_enum_name(enum)
	return enums[enum] or 'undefined'
end

-- Button handlers.

local function init_pressed(self)
	log('init_pressed')

	-- cas events handler.
	local function listener(event)
		log('cas listener')
		if event.type then
			event.type_str = get_enum_name(event.type)
		end
		if event.phase then
			event.phase_str = get_enum_name(event.phase)
		end
		plog(event)
		if event.phase == cas.INIT then -- cas has been initialized, now it's safe to load a banner.
			--cas.load(cas.BANNER)
		elseif event.type == cas.REWARDED and event.phase == cas.COMPLETE then
			log('reward received')
		end
	end

	cas.set(cas.TAGGED_AUDIENCE, cas.AUDIENCE_UNDEFINED)

	-- Init cas.
	cas.init{
		id = 'your.cas.id',
		--test_device = '02C38EECA8E7F87B1B8F2EDC67D772F8',
		disable_banner = true,
		test = true, -- ALWAYS use test ads, only disable when submitting to the stores.
		listener = listener
	}
end

local function validate_pressed(self)
	log('validate_pressed')
	cas.validate_integration()
end

-- Load.

local function load_interstitial_pressed(self)
	log('load_interstitial_pressed')
	cas.load(cas.INTERSTITIAL)
end

local function load_rewarded_video_pressed(self)
	log('load_rewarded_video_pressed')
	cas.load(cas.REWARDED)
end

-- Show.

local function show_interstitial_pressed(self)
	log('show_interstitial_pressed')
	cas.show(cas.INTERSTITIAL)
end


local function show_rewarded_video_pressed(self)
	log('show_rewarded_video_pressed')
	cas.show(cas.REWARDED)
end

-- Is loaded?

local function is_interstitial_loaded_pressed(self)
	log('is_interstitial_loaded_pressed')
	log('Is interstitial loaded? ' .. (cas.is_loaded(cas.INTERSTITIAL) and 'Yes' or 'No'))
end

local function is_rewarded_loaded_pressed(self)
	log('is_rewarded_loaded_pressed')
	log('Is rewarded loaded? ' .. (cas.is_loaded(cas.REWARDED) and 'Yes' or 'No'))
end

-- Banner.

local function load_banner_pressed(self)
	log('load_banner_pressed')
	cas.load(cas.BANNER)
end

local function hide_banner_pressed(self)
	log('hide_banner_pressed')
	cas.hide_banner()
end

-- Show/hide logs view.

local function logs_pressed(self)
	gui.set_enabled(gui.get_node('logs'), not gui.is_enabled(gui.get_node('logs')))
end

-- GUI init.
function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post('@render:', 'clear_color', {color = vmath.vector4(1.0, 1.0, 1.0, 1.0)})
	gui.set_enabled(gui.get_node('logs'), false)
end

-- Update logs view.
local frame = 0
function update(self, dt)
	frame = frame + 1
	if frame == 30 then
		log_flush()
		frame = 0
	end
end

-- Check if a button is clicked.
local function button_click(self, action, node_name, callback)
	if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
		if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1.02, 1.02, 1.02))
		elseif action.released then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1, 1, 1))
			callback(self)
		end
	end
end

local buttons = {
	btn_init = init_pressed,
	btn_validate = validate_pressed,
	btn_load_interstitial = load_interstitial_pressed,
	btn_load_rewarded_video = load_rewarded_video_pressed,
	btn_show_interstitial = show_interstitial_pressed,
	btn_show_rewarded_video = show_rewarded_video_pressed,
	btn_is_interstitial_loaded = is_interstitial_loaded_pressed,
	btn_is_rewarded_loaded = is_rewarded_loaded_pressed,
	btn_load_banner = load_banner_pressed,
	btn_hide_banner = hide_banner_pressed,
	btn_logs = logs_pressed
}
function on_input(self, action_id, action)
	if action_id == hash('touch') then
		for button, callback in pairs(buttons) do
			button_click(self, action, button, callback)
		end
	end
end
